/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java'
    id 'maven-publish'
    id 'org.springframework.boot' version '2.1.9.RELEASE'
    id "org.sonarqube" version "3.0"
    id 'jacoco'
    id 'application'
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.spring.io/snapshot')
    }

    maven {
        url = uri('https://repo.spring.io/milestone')
    }

    maven {
        url = uri('https://repo.maven.apache.org/maven2')
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator:2.3.0.RC1'
    implementation 'org.springframework.boot:spring-boot-starter-cache:2.3.0.RC1'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.3.0.RC1'
    implementation 'org.springframework.boot:spring-boot-starter-web:2.3.0.RC1'
    implementation 'org.springframework.boot:spring-boot-starter-validation:2.3.0.RC1'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf:2.3.0.RC1'
    implementation 'javax.cache:cache-api:1.1.1'
    implementation 'org.ehcache:ehcache:3.8.1'
    implementation 'org.webjars:webjars-locator-core:0.45'
    implementation 'org.webjars:jquery:2.2.4'
    implementation 'org.webjars:jquery-ui:1.11.4'
    implementation 'org.webjars:bootstrap:3.3.6'
    implementation 'org.springframework.boot:spring-boot-devtools:2.3.0.RC1'
    runtimeOnly 'com.h2database:h2:1.4.200'
    runtimeOnly 'mysql:mysql-connector-java:8.0.20'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.3.0.RC1'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.6.2'
    testImplementation 'org.mockito:mockito-junit-jupiter:3.3.3'

    //Agregado esto para poder usar JUnit3-4 y probar con el framework de JUnit5
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testCompileOnly 'junit:junit:4.13'
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine'
}

group = 'org.springframework.samples'
version = '2.3.0.BUILD-SNAPSHOT'
description = 'petclinic'
sourceCompatibility = '1.8'

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

application {
    mainClass = 'org.springframework.samples.petclinic.PetClinicApplication'
}

sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.sources", "src/main/java"
        property "sonar.tests", "src/test/java"
        property "sonar.projectName", "PetClinic UTN"
        property "sonar.projectKey", "org.springframework:petclinic"
        property "sonar.language", "java"
    }
}

test {
    useJUnitPlatform()
    jacoco {
        destinationFile = file("${buildDir}/jacoco/jacocoTest.exec")
        classDumpDir = file("${buildDir}/jacoco/classpathdumps")
    }
    finalizedBy jacocoTestReport // report is always generated after tests run
}

//jacoco {
//    applyTo run
//}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.enabled false
        csv.enabled false
        html.enabled true
        //html.destination file("${buildDir}/jacocoHtml")
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
